{"version":3,"sources":["getWeb3.js","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","NavBar","this","props","userAccount","contractOwner","className","substring","length","renderUserAccount","Component","App","state","storageValue","accounts","contract","stakeValue","stakeToken","totalStakes","totalRewards","stakeReward","rewardFunds","ERC20Allowance","stakeValueInputError","annualRewardEstimate","componentWillMount","eth","getAccounts","net","getId","networkId","alert","deployedNetwork","StakingContract","networks","instance","Contract","abi","address","updateTimer","setInterval","refreshStakeRewards","events","ERC20Staked","on","event","doWhenEvent","error","ERC20Unstaked","RewardClaimed","RewardsFunded","RewardsRefunded","setState","runInit","data","methods","owner","call","stakeOf","stakeTokenOf","calculateReward","ERC20instance","ERC20Contract","allowance","_address","handleStake","value","stake","utils","toWei","send","from","handleUnstake","unstake","handleFundRewards","fundRewards","handleRefundRewards","refundRewards","handleClaimReward","claimReward","handleApprove","tokenAddress","approve","handleTokenChange","handleTokenValueChange","tokenValue","priceFeedAddress","priceFeedContract","AggregatorV3InterfaceABIContract","latestRoundData","priceFeedResult","toFixed","clearInterval","timer","Fragment","aria-label","onChange","ref","input","type","onClick","id","placeholder","scope","convertAddressToToken","fromWei","renderStakingInfo","renderStakingStatus","renderStakingAction","renderStakingAdmin","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7260257.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass NavBar extends Component {\n  //state = {  }\n\n  renderUserAccount() {\n    if (this.props.userAccount === this.props.contractOwner) {\n      return (\n        <span className=\"badge rounded-pill bg-danger\">\n          {this.props.userAccount.substring(0, 5) +\n            \"...\" +\n            this.props.userAccount.substring(\n              this.props.userAccount.length - 3,\n              this.props.userAccount.length\n            )}\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"badge rounded-pill bg-primary\">\n          {this.props.userAccount.substring(0, 5) +\n            \"...\" +\n            this.props.userAccount.substring(\n              this.props.userAccount.length - 3,\n              this.props.userAccount.length\n            )}\n        </span>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-light\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand mb-0 h1\">\n            <strong>Staking Dapp</strong>\n          </span>\n          {this.renderUserAccount()}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport StakingContract from \"./contracts/Staking.json\";\nimport ERC20Contract from \"./contracts/ERC20.json\";\nimport AggregatorV3InterfaceABIContract from \"./contracts/AggregatorV3InterfaceABI.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    contractOwner: null,\n    stakeValue: null,\n    stakeToken: null,\n    totalStakes: null,\n    totalRewards: null,\n    stakeReward: null,\n    rewardFunds: null,\n    ERC20Allowance: null,\n    stakeValueInputError: null,\n    annualRewardEstimate: 0,\n  };\n\n  componentWillMount = async () => {\n    console.log(\"==> componentDidMount\");\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      if (networkId !== 1337 && networkId !== 42) {\n        alert(\n          \"Wrong Network(\" +\n            networkId +\n            \"). Please Switch to Alyra Network(1337) or Kovan Network(42) \"\n        );\n        return;\n      }\n      const deployedNetwork = StakingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        StakingContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set a timer to refresh the page every 10 seconds\n      this.updateTimer = setInterval(() => this.refreshStakeRewards(), 10000);\n\n      // Subscribe to events\n      instance.events\n        .ERC20Staked()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .ERC20Unstaked()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .RewardClaimed()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .RewardsFunded()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .RewardsRefunded()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  doWhenEvent = async (data) => {\n    console.log(\"==> doWhenEvent\", data.event);\n\n    switch (data.event) {\n      case \"ERC20Staked\":\n      case \"ERC20Unstaked\":\n      case \"RewardClaimed\":\n      case \"RewardsDistrubuted\":\n      case \"RewardsFunded\":\n      case \"RewardsRefunded\":\n        this.runInit();\n        break;\n      default:\n        console.log(\"Event not managed\");\n    }\n  };\n\n  convertAddressToToken(tokenAddress) {\n    switch (tokenAddress) {\n      case \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\":\n        return \"DAI\";\n      case \"0x02D9844E6c67B6251eDf631f0eC72C4D545e6eAb\":\n        return \"ALY\";\n      default:\n        return \"DAI\";\n    }\n  }\n\n  runInit = async () => {\n    console.log(\"==> runInit\");\n    const { web3, contract, accounts } = this.state;\n    const contractOwner = await contract.methods.owner().call();\n    console.log(\"==> runInit 1\");\n    const stakeValue = await contract.methods.stakeOf(accounts[0]).call();\n    console.log(\"==> runInit 2\");\n    const stakeToken = await contract.methods.stakeTokenOf(accounts[0]).call();\n    console.log(\"==> runInit 3\");\n    const totalStakes = await contract.methods.totalStakes().call();\n    const totalRewards = await contract.methods.totalRewards().call();\n    //const totalRewards = \"0\";\n    const stakeReward = await contract.methods\n      .calculateReward(accounts[0])\n      .call();\n    const rewardFunds = await contract.methods.rewardFunds().call();\n\n    const ERC20instance = new web3.eth.Contract(\n      ERC20Contract.abi,\n      \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\"\n    );\n    const ERC20Allowance = await ERC20instance.methods\n      .allowance(accounts[0], contract._address)\n      .call();\n\n    this.setState({\n      contractOwner: contractOwner,\n      stakeValue: stakeValue,\n      stakeToken: stakeToken,\n      totalStakes: totalStakes,\n      totalRewards: totalRewards,\n      stakeReward: stakeReward,\n      rewardFunds: rewardFunds,\n      ERC20Allowance: ERC20Allowance,\n      stakeValueInputError: null,\n    });\n  };\n\n  refreshStakeRewards = async () => {\n    console.log(\"==> refreshStakeRewards\");\n    const { contract, accounts } = this.state;\n    const stakeReward = await contract.methods\n      .calculateReward(accounts[0])\n      .call();\n    console.log(\"==> refreshStakeRewards 1\");\n    const totalStakes = await contract.methods.totalStakes().call();\n    console.log(\"==> refreshStakeRewards 2\");\n    const totalRewards = await contract.methods.totalRewards().call();\n    console.log(\"==> refreshStakeRewards 3\");\n    this.setState({\n      stakeReward: stakeReward,\n      totalStakes: totalStakes,\n      totalRewards: totalRewards,\n    });\n  };\n\n  handleStake = async () => {\n    console.log(\"handleStake\");\n    const { web3, accounts, contract } = this.state;\n    const stakeToken = this.stakeToken.value;\n    const stakeValue = this.stakeValue.value;\n\n    if (stakeValue == null || stakeValue <= 0) {\n      this.setState({\n        stakeValueInputError: \"Please, enter an Token amount > 0\",\n      });\n      return;\n    }\n    await contract.methods\n      .stake(stakeToken, web3.utils.toWei(stakeValue, \"ether\"))\n      .send({\n        from: accounts[0],\n      });\n    this.runInit();\n  };\n\n  handleUnstake = async () => {\n    console.log(\"handleUnstake\");\n    const { accounts, contract } = this.state;\n\n    await contract.methods.unstake().send({\n      from: accounts[0],\n    });\n    this.runInit();\n  };\n\n  handleFundRewards = async () => {\n    console.log(\"handleFundRewards\");\n    const { web3, contract, accounts } = this.state;\n    await contract.methods.fundRewards().send({\n      from: accounts[0],\n      value: web3.utils.toWei(\"0.1\", \"ether\"),\n    });\n    this.runInit();\n  };\n\n  handleRefundRewards = async () => {\n    console.log(\"handleRefundRewards\");\n    const { accounts, contract } = this.state;\n    await contract.methods.refundRewards().send({\n      from: accounts[0],\n    });\n    this.runInit();\n  };\n\n  handleClaimReward = async () => {\n    console.log(\"handleClaimReward\");\n    const { accounts, contract } = this.state;\n    await contract.methods.claimReward().send({\n      from: accounts[0],\n    });\n    this.runInit();\n  };\n\n  handleApprove = async () => {\n    console.log(\"handleApprove\");\n    const { web3, accounts, contract } = this.state;\n    const tokenAddress = this.stakeToken.value;\n    const ERC20instance = new web3.eth.Contract(\n      ERC20Contract.abi,\n      tokenAddress\n    );\n    await ERC20instance.methods\n      .approve(contract._address, web3.utils.toWei(\"1000000000\", \"ether\"))\n      .send({\n        from: accounts[0],\n      });\n    this.runInit();\n  };\n\n  handleTokenChange = async (event) => {\n    console.log(\"handleTokenChange\");\n    const { web3, accounts, contract } = this.state;\n    const stakeToken = this.stakeToken.value;\n    const ERC20instance = new web3.eth.Contract(ERC20Contract.abi, stakeToken);\n    const ERC20Allowance = await ERC20instance.methods\n      .allowance(accounts[0], contract._address)\n      .call();\n    //event.preventDefault();\n    this.setState({\n      ERC20Allowance: ERC20Allowance,\n    });\n    this.handleTokenValueChange();\n  };\n\n  handleTokenValueChange = async () => {\n    console.log(\"handleTokenValueChange\");\n    const { web3 } = this.state;\n    if (this.stakeValue == null) return;\n    const tokenAddress = this.stakeToken.value;\n    const tokenValue = this.stakeValue.value;\n    let priceFeedAddress = null;\n    switch (tokenAddress) {\n      case \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\":\n        // DAI/ETH\n        priceFeedAddress = \"0x22B58f1EbEDfCA50feF632bD73368b2FdA96D541\";\n        break;\n      case \"0x02D9844E6c67B6251eDf631f0eC72C4D545e6eAb\":\n        //ALY/ETH (AAVE/ETH)\n        priceFeedAddress = \"0xd04647B7CB523bb9f26730E9B6dE1174db7591Ad\";\n        break;\n      default:\n        // DAI/ETH\n        priceFeedAddress = \"0x22B58f1EbEDfCA50feF632bD73368b2FdA96D541\";\n    }\n    const priceFeedContract = new web3.eth.Contract(\n      AggregatorV3InterfaceABIContract.abi,\n      priceFeedAddress\n    );\n    const priceFeedResult = await priceFeedContract.methods\n      .latestRoundData()\n      .call();\n    const annualRewardEstimate = (\n      tokenValue *\n      (priceFeedResult[1] / 1000000000000000000 / 1000) *\n      3600 *\n      24 *\n      365\n    ).toFixed(2);\n    this.setState({\n      annualRewardEstimate: annualRewardEstimate,\n      stakeValueInputError: null,\n    });\n  };\n\n  renderStakingAction() {\n    console.log(\"==> renderStakingAction\");\n    const {\n      ERC20Allowance,\n      stakeValue,\n      stakeReward,\n      stakeValueInputError,\n      annualRewardEstimate,\n    } = this.state;\n    return (\n      <React.Fragment>\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <strong>Stake/Unstake</strong>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"row\">\n                  {stakeValue == 0 && (\n                    <div className=\"col-sm-3 offset-1\">\n                      <select\n                        className=\"form-select form-select-sm\"\n                        aria-label=\".form-select-sm example\"\n                        onChange={this.handleTokenChange}\n                        ref={(input) => {\n                          this.stakeToken = input;\n                        }}\n                      >\n                        <option value=\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\">\n                          DAI\n                        </option>\n                        <option value=\"0x02D9844E6c67B6251eDf631f0eC72C4D545e6eAb\">\n                          ALY\n                        </option>\n                      </select>\n                    </div>\n                  )}\n                  {ERC20Allowance == 0 && (\n                    <div className=\"col-sm-3 offset-4\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={this.handleApprove}\n                      >\n                        <b>Approve</b>\n                      </button>\n                    </div>\n                  )}\n                  {ERC20Allowance > 0 && stakeValue == 0 && (\n                    <div className=\"col-sm-3 offset-1\">\n                      <input\n                        type=\"text\"\n                        id=\"stakeValue\"\n                        className={\n                          \"form-control\" +\n                          (stakeValueInputError == null ? \"\" : \" is-invalid\")\n                        }\n                        ref={(input) => {\n                          this.stakeValue = input;\n                        }}\n                        placeholder=\"Token amount\"\n                        onChange={this.handleTokenValueChange}\n                      ></input>\n                      <div className=\"invalid-feedback\">\n                        {stakeValueInputError}\n                      </div>\n                    </div>\n                  )}\n                  {ERC20Allowance > 0 && stakeValue == 0 && (\n                    <div className=\"col-sm-3 offset-1\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-success\"\n                        onClick={this.handleStake}\n                      >\n                        <b>Stake</b>\n                      </button>\n                    </div>\n                  )}\n                  {ERC20Allowance > 0 && stakeValue > 0 && (\n                    <div className=\"col-sm-6 offset-3\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-danger\"\n                        onClick={this.handleUnstake}\n                      >\n                        <b>Unstake</b>\n                      </button>\n                    </div>\n                  )}\n                  <br></br>\n                </div>\n                <br></br>\n                {ERC20Allowance > 0 && stakeValue == 0 && (\n                  <div className=\"row\">\n                    <div className=\"col-sm-6 offset-1\">\n                      <p>\n                        <b>Annual Reward Estimate: </b>\n                      </p>\n                    </div>\n                    <div className=\"col-sm-4 offset-1\">\n                      <p>{annualRewardEstimate} ETH</p>\n                    </div>\n                  </div>\n                )}\n                <div className=\"row\">\n                  {stakeReward > 0 && (\n                    <div className=\"col-sm-6 offset-3\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={this.handleClaimReward}\n                      >\n                        <b>Claim your rewards</b>\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <br></br>\n      </React.Fragment>\n    );\n  }\n\n  renderStakingStatus() {\n    console.log(\"==> renderStakingStatus\");\n    const { web3, stakeValue, stakeToken, stakeReward } = this.state;\n    return (\n      <React.Fragment>\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <strong>Staking Status</strong>\n              </div>\n              {stakeValue > 0 ? (\n                <div className=\"card-body\">\n                  <table className=\"table table-striped\">\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">Token</th>\n                        <th scope=\"col\">Value</th>\n                        <th scope=\"col\">Rewards</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>{this.convertAddressToToken(stakeToken)}</td>\n                        <td>{web3.utils.fromWei(stakeValue, \"ether\")}</td>\n                        <td>{web3.utils.fromWei(stakeReward, \"ether\")}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"card-body\">\n                  <p>No Staking</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderStakingAdmin() {\n    console.log(\"==> renderStakingAdmin\");\n    const { web3, rewardFunds, totalStakes, totalRewards } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <strong>Staking Admin</strong>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"row\">\n                  <table className=\"table table-striped\">\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">Total Stakes</th>\n                        <th scope=\"col\">Total Rewards</th>\n                        <th scope=\"col\">Reward Funds</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>{web3.utils.fromWei(totalStakes, \"ether\")}</td>\n                        <td>{web3.utils.fromWei(totalRewards, \"ether\")}</td>\n                        <td>{web3.utils.fromWei(rewardFunds, \"ether\")}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-sm-4 offset-2\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-success\"\n                      onClick={this.handleFundRewards}\n                    >\n                      Fund Rewards\n                    </button>\n                  </div>\n                  <div className=\"col-sm-4\">\n                    {rewardFunds > 0 && (\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-danger\"\n                        onClick={this.handleRefundRewards}\n                      >\n                        Refund Rewards\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderStakingInfo() {\n    console.log(\"==> renderStakingInfo\");\n    return (\n      <React.Fragment>\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"card text-center bg-info text-white\">\n              <div className=\"card-header\">\n                <strong>Staking Dapp Information</strong>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"row\">\n                  <p>\n                    Stake your favorite ERC20 token and earn, each minutes,\n                    1/1000 of the token value in ETH !\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    console.log(\"==> render\");\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <React.Fragment>\n        <NavBar\n          contractOwner={this.state.contractOwner}\n          userAccount={this.state.accounts[0]}\n        />\n        <main className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-8 offset-2 text-center\">\n              {this.renderStakingInfo()}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-8 offset-2 text-center\">\n              {this.renderStakingStatus()}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-8 offset-2 text-center\">\n              {this.renderStakingAction()}\n            </div>\n          </div>\n          {this.state.contractOwner === this.state.accounts[0] && (\n            <div className=\"row\">\n              <div className=\"col-8 offset-2 text-center\">\n                {this.renderStakingAdmin()}\n              </div>\n            </div>\n          )}\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}